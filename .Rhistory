"ribosome" = "#002255ff",
"vesicle" = "#550000ff")
organelles_order <- c("membrane",
"cytoplasm",
"nucleoplasm",
"extracellular_region",
"endoplasmic_reticulum",
"Golgi_apparatus",
"ribosome",
"actin_cytoskeleton",
"mitochondrion",
"vesicle",
"nucleolus",
"nuclear_body",
"lysosome",
"endosome",
"chromosome",
"microtubules")
fibroblast_dt <- create_cell_dt(svg_folder=file.path(getwd(), "fibroblast"),
colors_shapes,
order_levels=organelles_order)
cell_plot <- plot_cell(coords_dt = "fibroblast")
cell_plot
save(fibroblast_dt, file = "fibroblast_dt.RData")
#' Plot available cellular pictograms
#' @description This function plots the outline of the all the availables cell type.
#' @examples available_pictograms()
#'
#' @import ggplot2
#'
#' @export
available_pictograms <- function() {
p_list <- list()
pictograms <- c("cell", "neuron", "fibroblast", "microglia")
for (d in pictograms){
p_list[[d]] <- plot_cell(d)
}
do.call(ggpubr::ggarrange, c(p_list, ncol=2, nrow=2))
}
available_pictograms()
setwd("C:/Users/martina/Documents/LAB/SMA/visual_neuron/")
utils_folder <- "C:/Users/martina/Documents/LAB/SMA/utils/"
library(expressyouRcell)
library(data.table)
library(ggplot2)
load(paste0(utils_folder, "enst_ensg_M22_E97.RData"))
ensg_dt <- setDT(ensg)
save_data <- function(sel, width, height, device = "png"){
data <- get(sel)
# create dir
p <- file.path(getwd(), "results", sel)
if (!dir.exists(p)){
dir.create(p, recursive = TRUE)
}
# table with summaries
write.table(data[["localization_values"]],
file = file.path(p, paste0("localization_values.csv")),
quote = FALSE,
row.names = FALSE,
col.names = TRUE,
sep = "\t")
# static plots
for (t in names(data[["plot"]])){
if (device=="png"){
ggsave(data[["plot"]][[t]],
filename = file.path(getwd(), "results", sel, paste0(t, ".png")),
device = "png",
width = width,
height = height)
}
if (device=="pdf"){
ggsave(data[["plot"]][[t]],
filename = file.path(getwd(), "results", sel, paste0(t, ".pdf")),
device = "pdf",
width = width,
height = height)
}
}
# final dt
p <- file.path(getwd(), "results", sel, "final_dt")
if (!dir.exists(p)){
dir.create(p, recursive = TRUE)
}
for (t in names(data[["final_dt"]])){
tmp <- data[["final_dt"]][[t]]
save(tmp, file = file.path(p, paste0(t, ".RData")))
}
# ranges dt
tmp <- data[["ranges"]]
save(tmp,
file = file.path(p,
paste0("categorical_classes.RData")))
}
source("C:/Users/martina/Documents/LAB/SMA/utils/diff_analysis_functions.R")
# load association genes and localization table ----
load("gene_loc_table.RData")
load("example_list.RData")
example_list_output <- color_cell(timepoint_list = example_list,
pictogram = "neuron",
gene_loc_table = gene_loc_table,
coloring_mode = "mean",
group_by = "class",
grouping_vars = list("class"=c("+","-")),
col_name = "logFC",
colors = list("+" = c("#eaf3ea", "#307e2d"),
"-" = c("#f3eaea", "#7e302d")))
example_list_output_together <- color_cell(timepoint_list = example_list,
pictogram = "neuron",
gene_loc_table = gene_loc_table,
coloring_mode = "mean",
grouping_vars = list("class"=c("+","-")),
col_name = "logFC",
colors = list("+" = c("#eaf3ea", "#307e2d"),
"-" = c("#f3eaea", "#7e302d")))
example_list_output_together_cpm <- color_cell(timepoint_list = example_list,
pictogram = "neuron",
gene_loc_table = gene_loc_table,
coloring_mode = "mean",
col_name = "sma")
example_list_output_together_enr <- color_cell(timepoint_list = example_list,
pictogram = "neuron",
gene_loc_table = gene_loc_table,
coloring_mode = "enrichment",
group_by = "class",
grouping_vars = list("class"=c("+","-")))
example_list_output_together_cpm
devtools::load_all("~/LAB/SMA/expressyouRcell")
remove.packages("devtools", lib="~/R/win-library/4.0")
install.packages("devtools")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
install.packages("devtools")
library(devtools)
install_github("https://github.com/gittina/expressyouRcell", dependencies = TRUE)
remove.packages("devtools", lib="~/R/win-library/4.0")
install.packages(https://cran.r-project.org/src/contrib/Archive/devtools/devtools_2.4.2.tar.gz, repos=NULL, type="source")
install.packages("https://cran.r-project.org/src/contrib/Archive/devtools/devtools_2.4.2.tar.gz", repos=NULL, type="source")
library(expressyouRcell2)
library(expressyouRcell)
library(expressyouRcell)
setwd("C:/Users/martina/Documents/LAB/SMA/visual_neuron/")
utils_folder <- "C:/Users/martina/Documents/LAB/SMA/utils/"
# library(data.table)
# library(ggplot2)
library(expressyouRcell)
load(paste0(utils_folder, "enst_ensg_M22_E97.RData"))
ensg_dt <- setDT(ensg)
library(ggplot2)
setwd("C:/Users/martina/Documents/LAB/SMA/visual_neuron/")
utils_folder <- "C:/Users/martina/Documents/LAB/SMA/utils/"
library(data.table)
library(ggplot2)
library(expressyouRcell)
load(paste0(utils_folder, "enst_ensg_M22_E97.RData"))
ensg_dt <- setDT(ensg)
save_data <- function(sel, width, height, device = "png"){
data <- get(sel)
# create dir
p <- file.path(getwd(), "results", sel)
if (!dir.exists(p)){
dir.create(p, recursive = TRUE)
}
# table with summaries
write.table(data[["localization_values"]],
file = file.path(p, paste0("localization_values.csv")),
quote = FALSE,
row.names = FALSE,
col.names = TRUE,
sep = "\t")
# static plots
for (t in names(data[["plot"]])){
if (device=="png"){
ggsave(data[["plot"]][[t]],
filename = file.path(getwd(), "results", sel, paste0(t, ".png")),
device = "png",
width = width,
height = height)
}
if (device=="pdf"){
ggsave(data[["plot"]][[t]],
filename = file.path(getwd(), "results", sel, paste0(t, ".pdf")),
device = "pdf",
width = width,
height = height)
}
}
# final dt
p <- file.path(getwd(), "results", sel, "final_dt")
if (!dir.exists(p)){
dir.create(p, recursive = TRUE)
}
for (t in names(data[["final_dt"]])){
tmp <- data[["final_dt"]][[t]]
save(tmp, file = file.path(p, paste0(t, ".RData")))
}
# ranges dt
tmp <- data[["ranges"]]
save(tmp,
file = file.path(p,
paste0("categorical_classes.RData")))
}
# this function is just for my usage, to update the datatable if in case
colors_shapes <- list("synapse"="#c83737ff",
"axon"="#ffe680ff",
"cell_body" = "#ffccaaff",
"chromosome"= "black",
"endoplasmic_reticulum" = "#aa4400ff",
"Golgi_apparatus" = "#d40055ff",
"ribosome"="#002255ff",
"lysosome"="#d4aa00ff",
"membrane"="#480000ff",
"microtubule_cytoskeleton"="#007100ff",
"myelin_sheath"="#550000ff",
"mitochondrion"="#550000ff",
"nuclear_body"="#aa8800ff",
"nucleolus"="#c83737ff",
"nucleoplasm"="#ffaaaaff",
"actin_cytoskeleton"="#007100ff",
"extracellular_region"="#c83737ff",
"endosome"="#ffaaaaff",
"vesicle"="#550000ff",
"synaptic_membrane"="#480000ff")
cell_plot <- plot_cell(coords_dt = "fibroblast")
cell_plot
# CREATE fibroblast ----
colors_shapes <- list(
"actin_cytoskeleton" = "#480000ff",
"chromosome" = "black",
"cytoplasm"="#ffccaaff",
"endoplasmic_reticulum" = "#aa4400ff",
"endosome" = "#ffaaaaff",
"extracellular_region"= "#ffaaaaff",
"Golgi_apparatus" = "#d40055ff",
"lysosome" = "#d4aa00ff",
"membrane" = "#480000ff",
"microtubules" = "#550000ff",
"nuclear_body" = "#aa8800ff",
"mitochondrion" = "#550000ff",
"nucleolus" = "#c83737ff",
"nucleoplasm" = "#ffaaaaff",
"ribosome" = "#002255ff",
"vesicle" = "#550000ff")
organelles_order <- c("membrane",
"cytoplasm",
"nucleoplasm",
"extracellular_region",
"endoplasmic_reticulum",
"Golgi_apparatus",
"ribosome",
"actin_cytoskeleton",
"mitochondrion",
"vesicle",
"nucleolus",
"nuclear_body",
"lysosome",
"endosome",
"chromosome",
"microtubules")
fibroblast_dt <- create_cell_dt(svg_folder=file.path(getwd(), "fibroblast"),
colors_shapes,
order_levels=organelles_order)
cell_plot <- plot_cell(coords_dt = "fibroblast")
cell_plot
if (all(coords_dt == "cell")){
coords_dt <- cell_dt
} else {
if (all(coords_dt == "neuron")) {
coords_dt <- neuron_dt
} else {
if (all(coords_dt == "fibroblast")) {
coords_dt <- fibroblast_dt
} else {
if (all(coords_dt == "microglia")) {
coords_dt <- microglia_dt
} else {
stop("No available pictogram with this name")
}
}
}
}
coords_dt <- fibroblast_dt
ecmx <- (max(coords_dt[subcell_struct == "extracellular_region"]$x)-(min(coords_dt[subcell_struct == "extracellular_region"]$x)))/2
ecmx
p <- ggplot(coords_dt, aes(x, y, fill=comb, color=comb)) +
scale_fill_manual(values = coords_dt[, first(color), by=comb]$V1) +
scale_color_manual(values = rep("black", length(coords_dt[, first(color), by=comb]$V1))) +
geom_polygon() +
annotate("text", x=ecmx, y=ecmy, label="ECM", size=bs*0.2) +
scale_y_reverse() +
#theme_void() +
theme(legend.position = "none")
ecmy <- (min(coords_dt[subcell_struct == "extracellular_region"]$y)+
max(coords_dt[subcell_struct == "extracellular_region"]$y))/3
bs=25
p <- ggplot(coords_dt, aes(x, y, fill=comb, color=comb)) +
scale_fill_manual(values = coords_dt[, first(color), by=comb]$V1) +
scale_color_manual(values = rep("black", length(coords_dt[, first(color), by=comb]$V1))) +
geom_polygon() +
annotate("text", x=ecmx, y=ecmy, label="ECM", size=bs*0.2) +
scale_y_reverse() +
#theme_void() +
theme(legend.position = "none")
p
max(coords_dt[subcell_struct == "extracellular_region"]$x)
min(coords_dt[subcell_struct == "extracellular_region"]$x))
(min(coords_dt[subcell_struct == "extracellular_region"]$x)
min(coords_dt[subcell_struct == "extracellular_region"]$x)
(max(coords_dt[subcell_struct == "extracellular_region"]$x)-
(min(coords_dt[subcell_struct == "extracellular_region"]$x)))
max(coords_dt[subcell_struct == "extracellular_region"]$x
max(coords_dt[subcell_struct == "extracellular_region"]$x)
min(coords_dt[subcell_struct == "extracellular_region"]$x)
max(coords_dt[subcell_struct == "extracellular_region"]$x)-
(min(coords_dt[subcell_struct == "extracellular_region"]$x)
max(coords_dt[subcell_struct == "extracellular_region"]$x)-
(min(coords_dt[subcell_struct == "extracellular_region"]$x))
max(coords_dt[subcell_struct == "extracellular_region"]$x)-
(min(coords_dt[subcell_struct == "extracellular_region"]$x))
max(coords_dt[subcell_struct == "extracellular_region"]$x)-
(min(coords_dt[subcell_struct == "extracellular_region"]$x))
ecmx <- max(coords_dt[subcell_struct == "extracellular_region"]$x)-
(min(coords_dt[subcell_struct == "extracellular_region"]$x))
ecmx <- max(coords_dt[subcell_struct == "extracellular_region"]$x)-
(min(coords_dt[subcell_struct == "extracellular_region"]$x))
ecmx
ecmx <- max(coords_dt[subcell_struct == "extracellular_region"]$x)-
min(coords_dt[subcell_struct == "extracellular_region"]$x)
min(coords_dt[subcell_struct == "extracellular_region"]$x)
max(coords_dt[subcell_struct == "extracellular_region"]$x)
max(coords_dt[subcell_struct == "extracellular_region"]$x)-
min(coords_dt[subcell_struct == "extracellular_region"]$x)
ecmx <- min(coords_dt[subcell_struct == "extracellular_region"]$x)+ max(coords_dt[subcell_struct == "extracellular_region"]$x)-
min(coords_dt[subcell_struct == "extracellular_region"]$x)
ecmx
ecmy <- (min(coords_dt[subcell_struct == "extracellular_region"]$y)+
max(coords_dt[subcell_struct == "extracellular_region"]$y))/3
bs=25
p <- ggplot(coords_dt, aes(x, y, fill=comb, color=comb)) +
scale_fill_manual(values = coords_dt[, first(color), by=comb]$V1) +
scale_color_manual(values = rep("black", length(coords_dt[, first(color), by=comb]$V1))) +
geom_polygon() +
annotate("text", x=ecmx, y=ecmy, label="ECM", size=bs*0.2) +
scale_y_reverse() +
#theme_void() +
theme(legend.position = "none")
p
ecmx <- min(coords_dt[subcell_struct == "extracellular_region"]$x) + (max(coords_dt[subcell_struct == "extracellular_region"]$x)-
min(coords_dt[subcell_struct == "extracellular_region"]$x))/2
ecmy <- (min(coords_dt[subcell_struct == "extracellular_region"]$y)+
max(coords_dt[subcell_struct == "extracellular_region"]$y))/3
bs=25
p <- ggplot(coords_dt, aes(x, y, fill=comb, color=comb)) +
scale_fill_manual(values = coords_dt[, first(color), by=comb]$V1) +
scale_color_manual(values = rep("black", length(coords_dt[, first(color), by=comb]$V1))) +
geom_polygon() +
annotate("text", x=ecmx, y=ecmy, label="ECM", size=bs*0.2) +
scale_y_reverse() +
#theme_void() +
theme(legend.position = "none")
p
ecmx <- min(coords_dt[subcell_struct == "extracellular_region"]$x) + (max(coords_dt[subcell_struct == "extracellular_region"]$x)-
min(coords_dt[subcell_struct == "extracellular_region"]$x))/2
ecmy <- (min(coords_dt[subcell_struct == "extracellular_region"]$y)+
max(coords_dt[subcell_struct == "extracellular_region"]$y))/3
bs=25
p <- ggplot(coords_dt, aes(x, y, fill=comb, color=comb)) +
scale_fill_manual(values = coords_dt[, first(color), by=comb]$V1) +
scale_color_manual(values = rep("black", length(coords_dt[, first(color), by=comb]$V1))) +
geom_polygon() +
annotate("text", x=ecmx, y=ecmy, label="ECM", size=bs*0.2) +
scale_y_reverse() +
#theme_void() +
theme(legend.position = "none")
p
ecmx <- min(coords_dt[subcell_struct == "extracellular_region"]$x) + (max(coords_dt[subcell_struct == "extracellular_region"]$x)-
min(coords_dt[subcell_struct == "extracellular_region"]$x))/1
ecmy <- (min(coords_dt[subcell_struct == "extracellular_region"]$y)+
max(coords_dt[subcell_struct == "extracellular_region"]$y))/3
bs=25
p <- ggplot(coords_dt, aes(x, y, fill=comb, color=comb)) +
scale_fill_manual(values = coords_dt[, first(color), by=comb]$V1) +
scale_color_manual(values = rep("black", length(coords_dt[, first(color), by=comb]$V1))) +
geom_polygon() +
annotate("text", x=ecmx, y=ecmy, label="ECM", size=bs*0.2) +
scale_y_reverse() +
#theme_void() +
theme(legend.position = "none")
p
ecmx <- min(coords_dt[subcell_struct == "extracellular_region"]$x) + (max(coords_dt[subcell_struct == "extracellular_region"]$x)-
min(coords_dt[subcell_struct == "extracellular_region"]$x))/3
ecmy <- (min(coords_dt[subcell_struct == "extracellular_region"]$y)+
max(coords_dt[subcell_struct == "extracellular_region"]$y))/3
bs=25
p <- ggplot(coords_dt, aes(x, y, fill=comb, color=comb)) +
scale_fill_manual(values = coords_dt[, first(color), by=comb]$V1) +
scale_color_manual(values = rep("black", length(coords_dt[, first(color), by=comb]$V1))) +
geom_polygon() +
annotate("text", x=ecmx, y=ecmy, label="ECM", size=bs*0.2) +
scale_y_reverse() +
#theme_void() +
theme(legend.position = "none")
p
ecmx <- min(coords_dt[subcell_struct == "extracellular_region"]$x) + (max(coords_dt[subcell_struct == "extracellular_region"]$x)-
min(coords_dt[subcell_struct == "extracellular_region"]$x))/1.5
ecmy <- (min(coords_dt[subcell_struct == "extracellular_region"]$y)+
max(coords_dt[subcell_struct == "extracellular_region"]$y))/3
bs=25
p <- ggplot(coords_dt, aes(x, y, fill=comb, color=comb)) +
scale_fill_manual(values = coords_dt[, first(color), by=comb]$V1) +
scale_color_manual(values = rep("black", length(coords_dt[, first(color), by=comb]$V1))) +
geom_polygon() +
annotate("text", x=ecmx, y=ecmy, label="ECM", size=bs*0.2) +
scale_y_reverse() +
#theme_void() +
theme(legend.position = "none")
p
cell_plot <- plot_cell(coords_dt = "fibroblast")
fibroblast_dt <- create_cell_dt(svg_folder=file.path(getwd(), "fibroblast"),
colors_shapes,
order_levels=organelles_order)
cell_plot <- plot_cell(coords_dt = "fibroblast")
cell_plot
save(fibroblast_dt, file = "fibroblast_dt.RData")
library(expressyouRcell)
cell_plot <- plot_cell(coords_dt = "fibroblast")
cell_plot
library(expressyouRcell)
cell_plot <- plot_cell(coords_dt = "fibroblast")
cell_plot
library(expressyouRcell)
available_pictograms()
p_list <- list()
pictograms <- c("cell", "neuron", "fibroblast", "microglia")
for (d in pictograms){
p_list[[d]] <- plot_cell(d)
}
do.call(ggpubr::ggarrange, c(p_list, ncol=2, nrow=2))
do.call(ggpubr::ggarrange, c(p_list, ncol=4, nrow=1))
#' Plot available cellular pictograms
#' @description This function plots the outline of the all the availables cell type.
#' @examples available_pictograms()
#'
#' @import ggplot2
#'
#' @export
available_pictograms <- function() {
p_list <- list()
pictograms <- c("cell", "neuron", "fibroblast", "microglia")
for (d in pictograms){
p_list[[d]] <- plot_cell(d)
}
do.call(ggpubr::ggarrange, c(p_list, ncol=4, nrow=1))
}
p_list <- list()
pictograms <- c("cell", "neuron", "fibroblast", "microglia")
for (d in pictograms){
p_list[[d]] <- plot_cell(d)
}
do.call(ggpubr::ggarrange, c(p_list, ncol=4, nrow=1))
do.call(ggpubr::ggarrange, c(p_list,
ncol=2, nrow=2,
))
do.call(ggpubr::ggarrange, c(p_list,
ncol=2, nrow=2))
pictograms <- c("cell","microglia", "neuron", "fibroblast")
for (d in pictograms){
p_list[[d]] <- plot_cell(d)
}
do.call(ggpubr::ggarrange, c(p_list,
ncol=2, nrow=2))
p_list <- list()
pictograms <- c("cell","microglia", "neuron", "fibroblast")
for (d in pictograms){
p_list[[d]] <- plot_cell(d)
}
do.call(ggpubr::ggarrange, c(p_list,
ncol=2, nrow=2))
pictograms <- c("cell","fibroblast", "microglia", "neuron", )
for (d in pictograms){
p_list[[d]] <- plot_cell(d)
}
pictograms <- c("cell","fibroblast", "microglia", "neuron")
for (d in pictograms){
p_list[[d]] <- plot_cell(d)
}
do.call(ggpubr::ggarrange, c(p_list,
ncol=2, nrow=2))
do.call(ggpubr::ggarrange, c(p_list,
ncol=2, nrow=2))
p_list <- list()
pictograms <- c("cell","fibroblast", "microglia", "neuron")
for (d in pictograms){
p_list[[d]] <- plot_cell(d)
}
do.call(ggpubr::ggarrange, c(p_list,
ncol=2, nrow=2))
do.call(ggpubr::ggarrange, c(p_list,
ncol=2, nrow=2, widths=c(1,1.5)))
do.call(ggpubr::ggarrange, c(p_list,
ncol=2, nrow=2, widths=c(1,5)))
p_list <- list()
pictograms <- c("cell","fibroblast", "microglia", "neuron")
for (d in pictograms){
p_list[[d]] <- plot_cell(d)
}
do.call(ggpubr::ggarrange, c(p_list,
ncol=2, nrow=2, widths=c(1,5)))
do.call(ggpubr::ggarrange, c(p_list,
ncol=2, nrow=2))
library(expressyouRcell)

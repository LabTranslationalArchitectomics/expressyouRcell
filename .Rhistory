}
# table with summaries
write.table(data[["localization_values"]],
file = file.path(p, paste0("localization_values.csv")),
quote = FALSE,
row.names = FALSE,
col.names = TRUE,
sep = "\t")
# static plots
for (t in names(data[["plot"]])){
if (device=="png"){
ggsave(data[["plot"]][[t]],
filename = file.path(getwd(), "results", sel, paste0(t, ".png")),
device = "png",
width = width,
height = height)
}
if (device=="pdf"){
ggsave(data[["plot"]][[t]],
filename = file.path(getwd(), "results", sel, paste0(t, ".pdf")),
device = "pdf",
width = width,
height = height)
}
}
# final dt
p <- file.path(getwd(), "results", sel, "final_dt")
if (!dir.exists(p)){
dir.create(p, recursive = TRUE)
}
for (t in names(data[["final_dt"]])){
tmp <- data[["final_dt"]][[t]]
save(tmp, file = file.path(p, paste0(t, ".RData")))
}
# ranges dt
tmp <- data[["ranges"]]
save(tmp,
file = file.path(p,
paste0("categorical_classes.RData")))
}
# this function is just for my usage, to update the datatable if in case
colors_shapes <- list("synapse"="#c6c7b9ff",
"axon"="#ffe680ff",
"cell_body" = "#edecdcff",
"chromosome"= "66688dff",
"endoplasmic_reticulum" = "#ceb1ccff",
"Golgi_apparatus" = "#ebcee7ff",
"ribosome"="#66818dff",
"lysosome"="#a39bb2ff",
"membrane"="#495c67ff",
"microtubule_cytoskeleton"="#a4cac1ff",
"myelin_sheath"="#81aeacff",
"mitochondrion"="#d7c8d1ff",
"nuclear_body"="#c1d5e1ff",
"nucleolus"="#b9c3e6ff",
"nucleoplasm"="#ecdedeff",
"actin_cytoskeleton"="#c1d5e1ff",
"extracellular_region"="#edecdcff",
"endosome"="#dbc0b3ff",
"vesicle"="#dbdac2ff",
"synaptic_membrane"="#c1d5e1ff")
organelles_order <- c("membrane",
"synapse",
"axon",
"cell_body",
"nucleoplasm",
"endoplasmic_reticulum",
"Golgi_apparatus",
"microtubule_cytoskeleton",
"ribosome",
"actin_cytoskeleton",
"mitochondrion",
"vesicle",
"nucleolus",
"nuclear_body",
"synaptic_membrane",
"lysosome",
"endosome",
"myelin_sheath",
"extracellular_region",
"chromosome")
neuron_dt <- create_cell_dt(svg_folder="neuron2.0horizontal/", colors_shapes = colors_shapes, order_levels=organelles_order)
neuron_plot <- plot_cell("neuron")
neuron_plot
# this function is just for my usage, to update the datatable if in case
colors_shapes <- list("synapse"="#c6c7b9ff",
"axon"="#e2e1bbff",
"cell_body" = "#edecdcff",
"chromosome"= "66688dff",
"endoplasmic_reticulum" = "#ceb1ccff",
"Golgi_apparatus" = "#ebcee7ff",
"ribosome"="#66818dff",
"lysosome"="#a39bb2ff",
"membrane"="#495c67ff",
"microtubule_cytoskeleton"="#a4cac1ff",
"myelin_sheath"="#81aeacff",
"mitochondrion"="#d7c8d1ff",
"nuclear_body"="#c1d5e1ff",
"nucleolus"="#b9c3e6ff",
"nucleoplasm"="#ecdedeff",
"actin_cytoskeleton"="#c1d5e1ff",
"extracellular_region"="#edecdcff",
"endosome"="#dbc0b3ff",
"vesicle"="#dbdac2ff",
"synaptic_membrane"="#c1d5e1ff")
organelles_order <- c("membrane",
"synapse",
"axon",
"cell_body",
"nucleoplasm",
"endoplasmic_reticulum",
"Golgi_apparatus",
"microtubule_cytoskeleton",
"ribosome",
"actin_cytoskeleton",
"mitochondrion",
"vesicle",
"nucleolus",
"nuclear_body",
"synaptic_membrane",
"lysosome",
"endosome",
"myelin_sheath",
"extracellular_region",
"chromosome")
neuron_dt <- create_cell_dt(svg_folder="neuron2.0horizontal/", colors_shapes = colors_shapes, order_levels=organelles_order)
neuron_plot <- plot_cell("neuron")
neuron_plot
save(neuron_dt, file = "neuron_dt.RData")
# CREATE generic cell ----
colors_shapes <- list(
"actin_cytoskeleton" = "#bdb3f0ff",
"cytoplasm"="#e3e7eeff",
"chromosome" = "6d6d6dff",
"endoplasmic_reticulum" = "#782170ff",
"Golgi_apparatus" = "#89457cff",
"ribosome" = "#9f7dc3ff",
"lysosome" = "#c8bcd4ff",
"membrane" = "#a188c9ff",
"mitochondrion" = "#bda0d6ff",
"nuclear_body" = "#ffdbdbff",
"nucleolus" = "#e792e0ff",
"nucleoplasm" = "#e7c2eeff",
"extracellular_region"= "#e3e7eeff",
"endosome" = "#499dc6ff",
"microtubule_cytoskeleton" = "#aebaf6ff",
"vesicle" = "#ffdbdbff")
organelles_order <- c("membrane",
"cytoplasm",
"nucleoplasm",
"extracellular_region",
"endoplasmic_reticulum",
"Golgi_apparatus",
"ribosome",
"actin_cytoskeleton",
"mitochondrion",
"vesicle",
"nucleolus",
"nuclear_body",
"lysosome",
"endosome",
"chromosome",
"microtubule_cytoskeleton")
cell_dt <- create_cell_dt(svg_folder=file.path(getwd(), "generic_cell2.0"), colors_shapes, order_levels=organelles_order)
cell_plot <- plot_cell("cell")
cell_plot
# CREATE generic cell ----
colors_shapes <- list(
"actin_cytoskeleton" = "#bdb3f0ff",
"cytoplasm"="#e3e7eeff",
"chromosome" = "6d6d6dff",
"endoplasmic_reticulum" = "#782170ff",
"Golgi_apparatus" = "#89457cff",
"ribosome" = "#9f7dc3ff",
"lysosome" = "#c8bcd4ff",
"membrane" = "#a188c9ff",
"mitochondrion" = "#bda0d6ff",
"nuclear_body" = "#ffdbdbff",
"nucleolus" = "#e792e0ff",
"nucleoplasm" = "#e7c2eeff",
"extracellular_region"= "#e3e7eeff",
"endosome" = "#499dc6ff",
"microtubule_cytoskeleton" = "#aebaf6ff",
"vesicle" = "#ffdbdbff")
# CREATE generic cell ----
colors_shapes <- list(
"actin_cytoskeleton" = "#bdb3f0ff",
"cytoplasm"="#e3e7eeff",
"chromosome" = "#6d6d6dff",
"endoplasmic_reticulum" = "#782170ff",
"Golgi_apparatus" = "#89457cff",
"ribosome" = "#9f7dc3ff",
"lysosome" = "#c8bcd4ff",
"membrane" = "#a188c9ff",
"mitochondrion" = "#bda0d6ff",
"nuclear_body" = "#ffdbdbff",
"nucleolus" = "#e792e0ff",
"nucleoplasm" = "#e7c2eeff",
"extracellular_region"= "#e3e7eeff",
"endosome" = "#499dc6ff",
"microtubule_cytoskeleton" = "#aebaf6ff",
"vesicle" = "#ffdbdbff")
organelles_order <- c("membrane",
"cytoplasm",
"nucleoplasm",
"extracellular_region",
"endoplasmic_reticulum",
"Golgi_apparatus",
"ribosome",
"actin_cytoskeleton",
"mitochondrion",
"vesicle",
"nucleolus",
"nuclear_body",
"lysosome",
"endosome",
"chromosome",
"microtubule_cytoskeleton")
cell_dt <- create_cell_dt(svg_folder=file.path(getwd(), "generic_cell2.0"), colors_shapes, order_levels=organelles_order)
cell_plot <- plot_cell("cell")
cell_plot
save(cell_dt, file = "cell_dt.RData")
# CREATE fibroblast ----
colors_shapes <- list(
"actin_cytoskeleton" = "#b3c3a2ff",
"chromosome" = "#4b3e79ff",
"cytoplasm"="#ece9ebff",
"endoplasmic_reticulum" = "#85babfff",
"endosome" = "#9f7dc3ff",
"extracellular_region"= "#ece9ebff",
"Golgi_apparatus" = "#8795b4ff",
"lysosome" = "#9f7dc3ff",
"membrane" = "#3d579fff",
"microtubule_cytoskeleton" = "#6fb7cdff",
"nuclear_body" = "#c2cfe1ff",
"mitochondrion" = "#550000ff",
"nucleolus" = "#9ac0bdff",
"nucleoplasm" = "#ceb1ccff",
"ribosome" = "#3d7a98ff",
"vesicle" = "#c2cfe1ff")
organelles_order <- c("membrane",
"cytoplasm",
"nucleoplasm",
"extracellular_region",
"endoplasmic_reticulum",
"Golgi_apparatus",
"ribosome",
"actin_cytoskeleton",
"mitochondrion",
"vesicle",
"nucleolus",
"nuclear_body",
"lysosome",
"endosome",
"chromosome",
"microtubule_cytoskeleton")
fibroblast_dt <- create_cell_dt(svg_folder=file.path(getwd(), "fibroblast"),
colors_shapes,
order_levels=organelles_order)
cell_plot <- plot_cell(coords_dt = "fibroblast")
cell_plot
# CREATE fibroblast ----
colors_shapes <- list(
"actin_cytoskeleton" = "#b3c3a2ff",
"chromosome" = "#4b3e79ff",
"cytoplasm"="#ece9ebff",
"endoplasmic_reticulum" = "#85babfff",
"endosome" = "#9f7dc3ff",
"extracellular_region"= "#ece9ebff",
"Golgi_apparatus" = "#8795b4ff",
"lysosome" = "#9f7dc3ff",
"membrane" = "#3d579fff",
"microtubule_cytoskeleton" = "#6fb7cdff",
"nuclear_body" = "#c2cfe1ff",
"mitochondrion" = "#bda0d6ff",
"nucleolus" = "#9ac0bdff",
"nucleoplasm" = "#ceb1ccff",
"ribosome" = "#3d7a98ff",
"vesicle" = "#c2cfe1ff")
organelles_order <- c("membrane",
"cytoplasm",
"nucleoplasm",
"extracellular_region",
"endoplasmic_reticulum",
"Golgi_apparatus",
"ribosome",
"actin_cytoskeleton",
"mitochondrion",
"vesicle",
"nucleolus",
"nuclear_body",
"lysosome",
"endosome",
"chromosome",
"microtubule_cytoskeleton")
fibroblast_dt <- create_cell_dt(svg_folder=file.path(getwd(), "fibroblast"),
colors_shapes,
order_levels=organelles_order)
cell_plot <- plot_cell(coords_dt = "fibroblast")
fibroblast_dt
cell_plot <- plot_cell(coords_dt = "fibroblast")
cell_plot
cell_plot
save(fibroblast_dt, file = "fibroblast_dt.RData")
# CREATE microglia ----
colors_shapes <- list(
"actin_cytoskeleton" = "#c28954ff",
"chromosome" = "#803000ff",
"cytoplasm"="#f8e8c4ff",
"endoplasmic_reticulum" = "#ddb47eff",
"endosome" = "#b89f00ff",
"extracellular_region"= "#f8e8c4ff",
"Golgi_apparatus" = "#dcd0b8ff",
"lysosome" = "#d1a700ff",
"membrane" = "#b4a79eff",
"microtubule_cytoskeleton" = "#d1a77fff",
"nuclear_body" = "#ff96aaff",
"mitochondrion" = "#d3a567ff",
"nucleolus" = "#e77932ff",
"nucleoplasm" = "#dcd0b8ff",
"ribosome" = "#edad36ff",
"vesicle" = "#dcd0b8ff")
organelles_order <- c("membrane",
"cytoplasm",
"nucleoplasm",
"extracellular_region",
"endoplasmic_reticulum",
"Golgi_apparatus",
"ribosome",
"actin_cytoskeleton",
"mitochondrion",
"vesicle",
"nucleolus",
"nuclear_body",
"lysosome",
"endosome",
"chromosome",
"microtubule_cytoskeleton")
microglia_dt <- create_cell_dt(svg_folder=file.path(getwd(), "microglia"),
colors_shapes,
order_levels=organelles_order)
cell_plot <- plot_cell("microglia")
cell_plot
save(microglia_dt, file = "microglia_dt.RData")
library(expressyouRcell)
protein_human <- color_cell(timepoint_list = prot_list,
pictograph = "cell",
gene_loc_table = gene_loc_table_h,
coloring_mode = "mean",
col_name = "protein level",
colors = c("#abdeff", "#296d98"))
proteomic_data <- as.data.table(readxl::read_excel("data/proteomic_human.xlsx",
sheet = "HLCTC_Generic clustering",
col_names = TRUE,
skip = 1),
)[, c("T: Gene Name",
"Day 1","Day 3","Day 5","Day 7","Day 10","Day 25","Day 30","Day 35")]
proteomic_data <- melt.data.table(proteomic_data, variable.name = "day", value.name = "protein level")
setnames(proteomic_data, "T: Gene Name", "gene_symbol")
proteomic_data[, `protein level` := 2^(`protein level`)]
prot_list <- list()
for (t in unique(proteomic_data$day)){
prot_list[[t]] <- proteomic_data[day == t]
}
protein_human <- color_cell(timepoint_list = prot_list,
pictograph = "cell",
gene_loc_table = gene_loc_table_h,
coloring_mode = "mean",
col_name = "protein level",
colors = c("#abdeff", "#296d98"))
load("gene_loc_table_h.RData")
protein_human <- color_cell(timepoint_list = prot_list,
pictograph = "cell",
gene_loc_table = gene_loc_table_h,
coloring_mode = "mean",
col_name = "protein level",
colors = c("#abdeff", "#296d98"))
# animate ----
sel <- "protein_human"
path <- file.path(getwd(), "results", sel)
names(get(sel)$final_dt)
debugonce(animat4e)
debugonce(animate)
animate(data = protein_human,
timepoints=names(get(sel)$final_dt),
seconds = 1, fps = 2,
input_dir = path, height = 6, width = 10,
filename = "protein_OK",
names = names(get(sel)$final_dt),
format = "gif")
grid.arrange(plot + guides(fill = FALSE), l, ncol=2, widths=w)
pl <- arrangeGrob(plot + guides(fill = FALSE), l, ncol=2, widths=w, )
pl <- arrangeGrob(plot, guides(fill = FALSE), l, ncol=2, widths=w, )
guides(fill = FALSE)
l
#pl <- grid.arrange(plot + guides(fill = FALSE), l, ncol=2, widths=w)
pl <- arrangeGrob(list(plot, l), ncol=2, widths=w)
pl
plot
l
#pl <- grid.arrange(plot + guides(fill = FALSE), l, ncol=2, widths=w)
pl <- arrangeGrob(list(plot, l), ncol=2)
pl
ggsave(pl, filename = file.path(frame_path, paste0(tr_n, "_", j_n, ".png")),
width = width,
height = height)
if (!dir.exists(frame_path)){
dir.create(frame_path, recursive = TRUE)
}
if (transition<10){
tr_n <- paste0(0, transition)
} else {
tr_n <- transition
}
animate(data = protein_human,
timepoints=names(get(sel)$final_dt),
seconds = 1, fps = 2,
input_dir = path, height = 6, width = 10,
filename = "protein_OK",
names = names(get(sel)$final_dt),
format = "gif")
debugonce(animate)
animate(data = protein_human,
timepoints=names(get(sel)$final_dt),
seconds = 1, fps = 2,
input_dir = path, height = 6, width = 10,
filename = "protein_OK",
names = names(get(sel)$final_dt),
format = "gif")
#pl <- grid.arrange(plot + guides(fill = FALSE), l, ncol=2, widths=w)
pl <- arrangeGrob(plot, l, ncol=2)
library(expressyouRcell)
library(expressyouRcell)
debugonce(animate)
library(expressyouRcell)
animate(data = protein_human,
timepoints=names(get(sel)$final_dt),
seconds = 1, fps = 2,
input_dir = path, height = 6, width = 10,
filename = "protein_OK",
names = names(get(sel)$final_dt),
format = "gif")
debugonce(animate)
animate(data = protein_human,
timepoints=names(get(sel)$final_dt),
seconds = 1, fps = 2,
input_dir = path, height = 6, width = 10,
filename = "protein_OK",
names = names(get(sel)$final_dt),
format = "gif")
debugonce(animate)
animate(data = protein_human,
timepoints=names(get(sel)$final_dt),
seconds = 1, fps = 2,
input_dir = path, height = 6, width = 10,
filename = "protein_OK",
names = names(get(sel)$final_dt),
format = "gif")
pl
#pl <- grid.arrange(plot + guides(fill = FALSE), l, ncol=2, widths=w)
pl <- arrangeGrob(plot, l, ncol=2, widths=w)
animate(data = protein_human,
timepoints=names(get(sel)$final_dt),
seconds = 1, fps = 2,
input_dir = path, height = 6, width = 10,
filename = "protein_OK",
names = names(get(sel)$final_dt),
format = "gif")
animate(data = protein_human,
timepoints=names(get(sel)$final_dt),
seconds = 1, fps = 2,
input_dir = path, height = 6, width = 10,
filename = "protein_OK",
names = names(get(sel)$final_dt),
format = "gif")
animate(data = protein_human,
timepoints=names(get(sel)$final_dt),
seconds = 2, fps = 15,
input_dir = path, height = 6, width = 10,
filename = "protein_OK_long",
names = names(get(sel)$final_dt),
format = "gif")
animate(data = example_list_output,
timepoints = c("brain_p3_rs-", "brain_p5_rs-"),
seconds = 3, fps = 5,
input_dir = getwd(), height = 4, width = 6,
filename = "brainp35",
names = c("p3", "p5"),
format = "gif")
protein_human
animate(data = protein_human,
timepoints=names(get(sel)$final_dt),
seconds = 2, fps = 5,
input_dir = path, height = 6, width = 10,
filename = "protein_OK_long",
names = names(get(sel)$final_dt),
format = "movie")
animate(data = protein_human,
timepoints=names(get(sel)$final_dt),
seconds = 2, fps = 5,
input_dir = path, height = 6, width = 10,
filename = "protein_OK_long",
names = names(get(sel)$final_dt),
format = "video")
suppressMessages(av::av_encode_video(input = png_files, output = file.path(input_dir, paste0(filename, ".mp4"))))
animate(data = protein_human,
timepoints=names(get(sel)$final_dt),
seconds = 2, fps = 10,
input_dir = path, height = 6, width = 10,
filename = "protein_OK_long",
names = names(get(sel)$final_dt),
format = "video")

sup <- unlist(max_v[max_range_width])
inf <- unlist(min_v[max_range_width])
min_v
max_range_width
widths
max_v
min_v
max_range_width <- which(widths == max(unlist(widths)))
inf <- unlist(min_v[max_range_width])
sup <- unlist(max_v[max_range_width])
inf <- unlist(min_v[max_range_width])
widths$`+`=30
widths
max_v
max_v$+`=31
max_v$`+`=31
max_v
min_v
widths
w <- max(unlist(widths))
binsize <- w / 8
sizes <- c(1, 1.5, 2, 5, 10, 20, 25, 50, 100, 200, 500, 1000, 2000)
diff <- sizes - binsize
binsize <- sizes[which(diff == min(diff[diff >0]))]
sup <- w + inf
fixed_ranges_dt <- data.table(start = head(seq(inf, sup, by = binsize), -1),
end = seq(inf, sup, by = binsize)[-1])
fixed_ranges_dt
dtlist <- list()
for (c in grouping_vars){
cat(c)
colfunc <- colorRampPalette(colors[[c]])
fixed_ranges_dt <- copy(fixed_ranges_dt)
fixed_ranges_dt <- fixed_ranges_dt[, values := seq(1, nrow(fixed_ranges_dt))
][, lab := paste("<", .SD[, round(end, 2)]), by=values]
colors_vector <- colfunc(n = (nrow(fixed_ranges_dt)-1)*3+1)
colors_vector <- colors_vector[seq(1, length(colors_vector), len=nrow(fixed_ranges_dt))]
fixed_ranges_dt <- fixed_ranges_dt[, colors := colors_vector]
dtlist[[c]] <- fixed_ranges_dt
}
together
dtlist
#' @param grouping_vars A character vector with classes of genes to be considered.
#' @param colors A character vector with two color codes for generating a color palettes with a shade for each interval.
#' @param value A character vector with two color codes for generating a color palettes composed of n_intervals colors.
#' @param together An boolean value specifying whether genes with different classification labels should be considered together (regardless their classification) or separately
#' @return A list of \code{data.table}s (one for each classes specified in the parameter classes) with categorical classes into which the fold change values grouped for each subcellular localization are mapped.
#' @examples
#' #assign_color_by_pval(genes=genes_down,plot_data = neuron_dt,gene_loc_table = gene_loc_table,colors=c("darkred", "white"))
#'
#' @import data.table
#'
discrete_symmetric_ranges <- function(timepoint_list,
plot_data,
gene_loc_table,
colname,
grouping_vars=NULL,
colors,
coloring_mode,
together=FALSE){
# THE TOGETHER PART IS WORKING QUITE WELL, BUT NOT THE OTHER PART
if (together){
groupedFC <-  c()
for (tp in names(timepoint_list)){
tmp <- data.table(external_gene_name=character(),
gene_id=character(),
logFC=numeric(),
pvalue=numeric(),
class=character(),
time=character())
for (c in grouping_vars){
genes <- timepoint_list[[tp]][class == c]
tmp <- funion(tmp, genes)
}
groupedFC <- c(groupedFC,
groupFC_byloc(genes = genes,
plot_data,
gene_loc_table,
coloring_mode))
}
sup <- max(abs(min(groupedFC)), max(groupedFC))
fixed_ranges_dt <- data.table(start = head(c(0, 0.5, seq(1, ceiling(sup))), -1),
end = c(0.5, seq(1, ceiling(sup))))
} else {
max_v <- min_v <- widths <- c()
for (c in grouping_vars){
groupedval <-  c()
for (tp in names(timepoint_list)){
genes <- timepoint_list[[tp]][class == c]
groupedval <- c(groupedval,
groupval_byloc(genes = genes,
plot_data,
gene_loc_table,
colname,
coloring_mode))
}
max_v[[c]] <- ceiling(max(abs(groupedval), na.rm = TRUE))
min_v[[c]] <- floor(min(abs(groupedval), na.rm = TRUE))
widths[[c]] <- abs(max_v[[c]]-min_v[[c]])
}
max_range_width <- which(widths == max(unlist(widths)))
if (max(unlist(widths)) <= 8){
inf <- unlist(min_v[max_range_width])
sup <- unlist(max_v[max_range_width])
fixed_ranges_dt <- data.table(start = head(seq(inf, sup), -1),
end = seq(inf, sup)[-1])
} else {
w <- max(unlist(widths))
binsize <- w / 8
sizes <- c(1, 1.5, 2, 5, 10, 20, 25, 50, 100, 200, 500, 1000, 2000)
diff <- sizes - binsize
binsize <- sizes[which(diff == min(diff[diff >0]))]
inf <- unlist(min_v[max_range_width])
sup <- w + inf
fixed_ranges_dt <- data.table(start = head(seq(inf, sup, by = binsize), -1),
end = seq(inf, sup, by = binsize)[-1])
}
}
dtlist <- list()
for (c in grouping_vars){
cat(c)
colfunc <- colorRampPalette(colors[[c]])
fixed_ranges_dt <- copy(fixed_ranges_dt)
fixed_ranges_dt <- fixed_ranges_dt[, values := seq(1, nrow(fixed_ranges_dt))
][, lab := paste("<", .SD[, round(end, 2)]), by=values]
colors_vector <- colfunc(n = (nrow(fixed_ranges_dt)-1)*3+1)
colors_vector <- colors_vector[seq(1, length(colors_vector), len=nrow(fixed_ranges_dt))]
fixed_ranges_dt <- fixed_ranges_dt[, colors := colors_vector]
dtlist[[c]] <- fixed_ranges_dt
}
if (together){
dtlist$`-` <- dtlist$`-`[, end := -end
][, start := -start
][, lab := paste("<", .SD[, round(start, 2)]), by=values
][order(start)]
dt_together <- rbind(dtlist$`-`, dtlist$`+`)
dt_together[, values := seq(1, nrow(dt_together))]
dtlist[['together']] <- dt_together
}
return(dtlist)
}
# MAIN FUNCTION ----
color_cell(timepoint_list = latrotoxin_data,
plot_data = neuron_dt_nocyto,
gene_loc_table = gene_loc_table,
coloring_mode="mean",
col_name="logFC",
group_by="class",
grouping_vars=c('+', '-'),
colors = list("+"=c("#eaf3ea", "#307e2d"),
"-"=c("#f3eaea", "#7e302d")))
color_cell <- function(timepoint_list,
plot_data,
gene_loc_table,
coloring_mode='enrichment',
col_name=NULL,
colors=NULL,
group_by=NULL,
grouping_vars=NULL,
ranges=NULL){
if (coloring_mode == 'mean' || coloring_mode == 'median'){
if (is.null(col_name)){
cat("ERROR: col_name parameter is missing")
} else {
# check if provided name is included in colnames
if (!is.null(group_by)){
# e.g. we are grouping by class of DEGs
if (is.null(colors)){
# random colors are chosen for each category in group_by column
all_grouping_vars <- as.character(unique(unlist(lapply(timepoint_list, function(x) unique(x[, get(group_by)])))))
colors=list()
color_codes <- sample_colors(length(all_grouping_vars))
for (v in seq_len(length(all_grouping_vars))){
colors[[all_grouping_vars[v]]] <- c("white", color_codes[[v]])
}
}
# check if provided name is included in colnames
if (!is.null(grouping_vars)){
colors <- colors[names(colors) %in% grouping_vars]
}
} else {
# not grouping by any classification
colors = c("white", "darkblue")
}
for (tp in names(timepoint_list)){
if (!is.null(group_by)){
# create a separate plot for each category
if (is.null(grouping_vars)) {
# all the categories are plotted independently
grouping_vars <- as.character(unique(unlist(lapply(timepoint_list, function(x) unique(x[, get(group_by)])))))
}
for (v in grouping_vars){
# genes <- timepoint_list[[tp]][get(group_by) == v]
fixed_ranges_f <-  discrete_symmetric_ranges(timepoint_list,
plot_data,
gene_loc_table,
colname = col_name,
grouping_vars,
colors,
coloring_mode)
# res <- assign_color_by_fc(genes = genes,
#                           plot_data = neuron_dt_nocyto,
#                           gene_loc_table = gene_loc_table,
#                           categorical_classes = fixed_ranges_f,
#                           mode = coloring_mode)
}
} else {
# create a plot regardless the classification
if (!is.null(grouping_vars)) {
# only specified categories are plotted, but genes are averaged regardless any classification
for (v in grouping_vars){
genes <- timepoint_list[[tp]][get(group_by) == v]
tmp <- funion(tmp, genes)
}
} else {
genes <- timepoint_list[[tp]]
}
fixed_ranges_f_together <- discrete_symmetric_ranges(timepoint_list,
plot_data,
gene_loc_table,
colname = col_name,
grouping_vars,
colors,
coloring_mode,
together=TRUE)
# res <- assign_color_by_fc(genes = genes,
#                           plot_data = neuron_dt_nocyto,
#                           gene_loc_table = gene_loc_table,
#                           categorical_classes = fixed_ranges_f_together$together,
#                           mode = coloring_mode)
}
}
}
}
}
# MAIN FUNCTION ----
color_cell(timepoint_list = latrotoxin_data,
plot_data = neuron_dt_nocyto,
gene_loc_table = gene_loc_table,
coloring_mode="mean",
col_name="logFC",
group_by="class",
grouping_vars=c('+', '-'),
colors = list("+"=c("#eaf3ea", "#307e2d"),
"-"=c("#f3eaea", "#7e302d")))
setwd("C:/Users/martina/Documents/LAB/SMA/visual_neuron/")
utils_folder <- "C:/Users/martina/Documents/LAB/SMA/utils/"
library(visualNeuron)
library(data.table)
library(ggplot2)
library(rsvg)
library(grImport2)
library(clusterProfiler)
library(org.Mm.eg.db)
library(ggpubr)
library(magick)
library(multtest)
library(IRanges)
# load association genes and localizations table ----
load("gene_loc_table.RData")
load("../visual_neuron/latrotoxin_0221_long.RData")
setnames(latrotoxin_0221_long, old = "log2FC", new = "logFC")
setnames(latrotoxin_0221_long, old = "gene_symbol", new = "external_gene_name")
latrotoxin_data <- list()
for (tp in unique(latrotoxin_0221_long$time)){
latrotoxin_data[[tp]] <- latrotoxin_0221_long[time == tp]
}
debugonce(color_cell)
library(visualNeuron)
debugonce(color_cell)
color_cell <- function(timepoint_list,
plot_data,
gene_loc_table,
coloring_mode='enrichment',
col_name=NULL,
colors=NULL,
group_by=NULL,
grouping_vars=NULL,
ranges=NULL){
if (coloring_mode == 'mean' || coloring_mode == 'median'){
if (is.null(col_name)){
cat("ERROR: col_name parameter is missing")
} else {
# check if provided name is included in colnames
if (!is.null(group_by)){
# e.g. we are grouping by class of DEGs
if (is.null(colors)){
# random colors are chosen for each category in group_by column
all_grouping_vars <- as.character(unique(unlist(lapply(timepoint_list, function(x) unique(x[, get(group_by)])))))
colors=list()
color_codes <- sample_colors(length(all_grouping_vars))
for (v in seq_len(length(all_grouping_vars))){
colors[[all_grouping_vars[v]]] <- c("white", color_codes[[v]])
}
}
# check if provided name is included in colnames
if (!is.null(grouping_vars)){
colors <- colors[names(colors) %in% grouping_vars]
}
} else {
# not grouping by any classification
colors = c("white", "darkblue")
}
for (tp in names(timepoint_list)){
if (!is.null(group_by)){
# create a separate plot for each category
if (is.null(grouping_vars)) {
# all the categories are plotted independently
grouping_vars <- as.character(unique(unlist(lapply(timepoint_list, function(x) unique(x[, get(group_by)])))))
}
for (v in grouping_vars){
# genes <- timepoint_list[[tp]][get(group_by) == v]
fixed_ranges_f <-  discrete_symmetric_ranges(timepoint_list,
plot_data,
gene_loc_table,
colname = col_name,
grouping_vars,
colors,
coloring_mode)
# res <- assign_color_by_fc(genes = genes,
#                           plot_data = neuron_dt_nocyto,
#                           gene_loc_table = gene_loc_table,
#                           categorical_classes = fixed_ranges_f,
#                           mode = coloring_mode)
}
} else {
# create a plot regardless the classification
if (!is.null(grouping_vars)) {
# only specified categories are plotted, but genes are averaged regardless any classification
for (v in grouping_vars){
genes <- timepoint_list[[tp]][get(group_by) == v]
tmp <- funion(tmp, genes)
}
} else {
genes <- timepoint_list[[tp]]
}
fixed_ranges_f_together <- discrete_symmetric_ranges(timepoint_list,
plot_data,
gene_loc_table,
colname = col_name,
grouping_vars,
colors,
coloring_mode,
together=TRUE)
# res <- assign_color_by_fc(genes = genes,
#                           plot_data = neuron_dt_nocyto,
#                           gene_loc_table = gene_loc_table,
#                           categorical_classes = fixed_ranges_f_together$together,
#                           mode = coloring_mode)
}
}
}
}
}
#' @param grouping_vars A character vector with classes of genes to be considered.
#' @param colors A character vector with two color codes for generating a color palettes with a shade for each interval.
#' @param value A character vector with two color codes for generating a color palettes composed of n_intervals colors.
#' @param together An boolean value specifying whether genes with different classification labels should be considered together (regardless their classification) or separately
#' @return A list of \code{data.table}s (one for each classes specified in the parameter classes) with categorical classes into which the fold change values grouped for each subcellular localization are mapped.
#' @examples
#' #assign_color_by_pval(genes=genes_down,plot_data = neuron_dt,gene_loc_table = gene_loc_table,colors=c("darkred", "white"))
#'
#' @import data.table
#'
discrete_symmetric_ranges <- function(timepoint_list,
plot_data,
gene_loc_table,
colname,
grouping_vars=NULL,
colors,
coloring_mode,
together=FALSE){
# THE TOGETHER PART IS WORKING QUITE WELL, BUT NOT THE OTHER PART
if (together){
groupedFC <-  c()
for (tp in names(timepoint_list)){
tmp <- data.table(external_gene_name=character(),
gene_id=character(),
logFC=numeric(),
pvalue=numeric(),
class=character(),
time=character())
for (c in grouping_vars){
genes <- timepoint_list[[tp]][class == c]
tmp <- funion(tmp, genes)
}
groupedFC <- c(groupedFC,
groupFC_byloc(genes = genes,
plot_data,
gene_loc_table,
coloring_mode))
}
sup <- max(abs(min(groupedFC)), max(groupedFC))
fixed_ranges_dt <- data.table(start = head(c(0, 0.5, seq(1, ceiling(sup))), -1),
end = c(0.5, seq(1, ceiling(sup))))
} else {
max_v <- min_v <- widths <- c()
for (c in grouping_vars){
groupedval <-  c()
for (tp in names(timepoint_list)){
genes <- timepoint_list[[tp]][class == c]
groupedval <- c(groupedval,
groupval_byloc(genes = genes,
plot_data,
gene_loc_table,
colname,
coloring_mode))
}
max_v[[c]] <- ceiling(max(abs(groupedval), na.rm = TRUE))
min_v[[c]] <- floor(min(abs(groupedval), na.rm = TRUE))
widths[[c]] <- abs(max_v[[c]]-min_v[[c]])
}
max_range_width <- which(widths == max(unlist(widths)))
if (max(unlist(widths)) <= 8){
inf <- unlist(min_v[max_range_width])
sup <- unlist(max_v[max_range_width])
fixed_ranges_dt <- data.table(start = head(seq(inf, sup), -1),
end = seq(inf, sup)[-1])
} else {
w <- max(unlist(widths))
binsize <- w / 8
sizes <- c(1, 1.5, 2, 5, 10, 20, 25, 50, 100, 200, 500, 1000, 2000)
diff <- sizes - binsize
binsize <- sizes[which(diff == min(diff[diff >0]))]
inf <- unlist(min_v[max_range_width])
sup <- w + inf
fixed_ranges_dt <- data.table(start = head(seq(inf, sup, by = binsize), -1),
end = seq(inf, sup, by = binsize)[-1])
}
}
dtlist <- list()
for (c in grouping_vars){
cat(c)
colfunc <- colorRampPalette(colors[[c]])
fixed_ranges_dt <- copy(fixed_ranges_dt)
fixed_ranges_dt <- fixed_ranges_dt[, values := seq(1, nrow(fixed_ranges_dt))
][, lab := paste("<", .SD[, round(end, 2)]), by=values]
colors_vector <- colfunc(n = (nrow(fixed_ranges_dt)-1)*3+1)
colors_vector <- colors_vector[seq(1, length(colors_vector), len=nrow(fixed_ranges_dt))]
fixed_ranges_dt <- fixed_ranges_dt[, colors := colors_vector]
dtlist[[c]] <- fixed_ranges_dt
}
if (together){
dtlist$`-` <- dtlist$`-`[, end := -end
][, start := -start
][, lab := paste("<", .SD[, round(start, 2)]), by=values
][order(start)]
dt_together <- rbind(dtlist$`-`, dtlist$`+`)
dt_together[, values := seq(1, nrow(dt_together))]
dtlist[['together']] <- dt_together
}
return(dtlist)
}
debugonce(color_cell)
# MAIN FUNCTION ----
color_cell(timepoint_list = latrotoxin_data,
plot_data = neuron_dt_nocyto,
gene_loc_table = gene_loc_table,
coloring_mode="mean",
col_name="logFC",
group_by="class",
grouping_vars=c('+', '-'),
colors = list("+"=c("#eaf3ea", "#307e2d"),
"-"=c("#f3eaea", "#7e302d")))
groupval_byloc <- function(genes, plot_data, gene_loc_table, colname, coloring_mode="mean"){
gene_loc_table <- gene_loc_table[Description %in% unique(plot_data$subcell_struct)]
genes_sel <- merge.data.table(genes,
gene_loc_table[, c("geneID", "Description")],
all.y = TRUE,
by.x = "external_gene_name",
by.y = "geneID")
if (coloring_mode == "mean"){
localization_values <- genes_sel[, .(mean(get(colname), na.rm = TRUE)), by=Description]
localization_values <- localization_values[order(V1)]
setnames(localization_values, old="V1", new=eval(coloring_mode))
} else {
if (coloring_mode == "median"){
localization_values <- genes_sel[, .(median(get(colname), na.rm = TRUE)), by=Description]
localization_values <- localization_values[order(V1)]
setnames(localization_values, old="V1", new=eval(coloring_mode))
} else {
cat("Unrecognized parameter, assigned default coloring_mode=\"mean\"")
}
}
return(localization_values[, get(coloring_mode)])
}
debugonce(color_cell)
# MAIN FUNCTION ----
color_cell(timepoint_list = latrotoxin_data,
plot_data = neuron_dt_nocyto,
gene_loc_table = gene_loc_table,
coloring_mode="mean",
col_name="logFC",
group_by="class",
grouping_vars=c('+', '-'),
colors = list("+"=c("#eaf3ea", "#307e2d"),
"-"=c("#f3eaea", "#7e302d")))
View(fixed_ranges_f)
setwd("C:/Users/martina/Documents/LAB/SMA/visual_neuron/")
utils_folder <- "C:/Users/martina/Documents/LAB/SMA/utils/"
library(visualNeuron)
# MAIN FUNCTION ----
color_cell(timepoint_list = latrotoxin_data,
plot_data = neuron_dt_nocyto,
gene_loc_table = gene_loc_table,
coloring_mode="mean",
col_name="logFC",
group_by="class",
grouping_vars=c('+', '-'),
colors = list("+"=c("#eaf3ea", "#307e2d"),
"-"=c("#f3eaea", "#7e302d")))
library(visualNeuron)
